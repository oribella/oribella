{"version":3,"sources":["../../src/point.js"],"names":[],"mappings":";;;;;;;;;;;;;;uBAAa;AACX,iBADW,KACX,CAAY,CAAZ,EAAe,CAAf,EAAkB;gCADP,OACO;;AAChB,eAAK,CAAL,GAAS,CAAT,CADgB;AAEhB,eAAK,CAAL,GAAS,CAAT,CAFgB;SAAlB;;AADW,wBAKX,iCAAW,GAAG;AACZ,cAAI,QAAQ,KAAK,CAAL,GAAS,EAAE,CAAF;cACnB,QAAQ,KAAK,CAAL,GAAS,EAAE,CAAF;cACjB,OAAO,KAAK,IAAL,CAAU,QAAQ,KAAR,GAAgB,QAAQ,KAAR,CAAjC,CAHU;;AAKZ,iBAAO,IAAP,CALY;;;AALH,wBAYX,qCAAa,GAAG;AACd,cAAI,IAAI,EAAE,CAAF,GAAM,KAAK,CAAL;cACZ,IAAI,EAAE,CAAF,GAAM,KAAK,CAAL;cACV,QAAQ,KAAK,KAAL,CAAW,CAAX,EAAc,CAAd,CAAR;cACA,UAAU,QAAQ,GAAR,GAAc,KAAK,EAAL,CAJZ;AAKd,iBAAO,OAAP,CALc;;;AAZL,wBAmBX,yBAAQ;AACN,iBAAO,IAAI,KAAJ,CAAU,KAAK,CAAL,EAAQ,KAAK,CAAL,CAAzB,CADM;;;eAnBG","file":"point.js","sourcesContent":["export class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  distanceTo(p) {\n    var xdist = this.x - p.x,\n      ydist = this.y - p.y,\n      dist = Math.sqrt(xdist * xdist + ydist * ydist);\n\n    return dist;\n  }\n  deltaAngleTo(p) {\n    var x = p.x - this.x,\n      y = p.y - this.y,\n      theta = Math.atan2(y, x),\n      degrees = theta * 180 / Math.PI;\n    return degrees;\n  }\n  clone() {\n    return new Point(this.x, this.y);\n  }\n}\n"]}